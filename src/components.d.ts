/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface RfsBadgeTitle {
        "bgColor": string;
        "color": string;
        "styleId": string;
    }
    interface RfsCarouselTxt {
    }
    interface RfsCarouselTxtItem {
    }
    interface RfsFloatFooter {
        "bgColor": string;
        "color": string;
        "radius": number;
        "styleId": string;
        "textGradientLeft": string;
        "textGradientRight": string;
    }
    interface RfsFloatHeader {
        "fixed": boolean;
    }
    interface RfsFloatHeaderItem {
        "bgColor": string;
        "bgColorHover": string;
        "color": string;
        "styleId": string;
        "target": string;
    }
    interface RfsFooter {
        "bgColor": string;
        "color": string;
        "styleId": string;
        "textGradientLeft": string;
        "textGradientRight": string;
    }
    interface RfsHeader {
        "bgColor": string;
        "fixed": boolean;
        "logo": string;
        "rtl": boolean;
        "smoothTop": boolean;
        "sticky": boolean;
        "styleId": string;
    }
    interface RfsIntro {
        "anchor": string;
        "image": void;
        "imgDesk": string;
        "imgMobile": string;
        "styleId": string;
    }
    interface RfsIntroBtn {
        "bgColor": string;
        "color": string;
        "styleId": string;
        "target": string;
    }
    interface RfsIntroDescription {
        "color": string;
        "styleId": string;
    }
    interface RfsIntroTitle {
        "color": string;
        "fontSize": number;
        "styleId": string;
    }
    interface RfsNavItem {
        "action": boolean;
        "actionButtonColor": string;
        "active": boolean;
        "color": string;
        "effectColor": string;
        "styleId": string;
        "target": string;
    }
    interface RfsParallaxImage {
        "deskImage": string;
        "mobileImage": string;
        "styleId": string;
    }
    interface RfsParallaxImageVerticalRepeat {
        "deskImage": string;
        "mobileImage": string;
        "styleId": string;
    }
    interface RfsSliderAnimated {
    }
    interface RfsSliderAnimatedItem {
    }
    interface RfsTextBox {
        "bgColor": string;
        "styleId": string;
    }
    interface RfsTextBoxItem {
        "color": string;
        "styleId": string;
        "titleColor": string;
    }
}
declare global {
    interface HTMLRfsBadgeTitleElement extends Components.RfsBadgeTitle, HTMLStencilElement {
    }
    var HTMLRfsBadgeTitleElement: {
        prototype: HTMLRfsBadgeTitleElement;
        new (): HTMLRfsBadgeTitleElement;
    };
    interface HTMLRfsCarouselTxtElement extends Components.RfsCarouselTxt, HTMLStencilElement {
    }
    var HTMLRfsCarouselTxtElement: {
        prototype: HTMLRfsCarouselTxtElement;
        new (): HTMLRfsCarouselTxtElement;
    };
    interface HTMLRfsCarouselTxtItemElement extends Components.RfsCarouselTxtItem, HTMLStencilElement {
    }
    var HTMLRfsCarouselTxtItemElement: {
        prototype: HTMLRfsCarouselTxtItemElement;
        new (): HTMLRfsCarouselTxtItemElement;
    };
    interface HTMLRfsFloatFooterElement extends Components.RfsFloatFooter, HTMLStencilElement {
    }
    var HTMLRfsFloatFooterElement: {
        prototype: HTMLRfsFloatFooterElement;
        new (): HTMLRfsFloatFooterElement;
    };
    interface HTMLRfsFloatHeaderElement extends Components.RfsFloatHeader, HTMLStencilElement {
    }
    var HTMLRfsFloatHeaderElement: {
        prototype: HTMLRfsFloatHeaderElement;
        new (): HTMLRfsFloatHeaderElement;
    };
    interface HTMLRfsFloatHeaderItemElement extends Components.RfsFloatHeaderItem, HTMLStencilElement {
    }
    var HTMLRfsFloatHeaderItemElement: {
        prototype: HTMLRfsFloatHeaderItemElement;
        new (): HTMLRfsFloatHeaderItemElement;
    };
    interface HTMLRfsFooterElement extends Components.RfsFooter, HTMLStencilElement {
    }
    var HTMLRfsFooterElement: {
        prototype: HTMLRfsFooterElement;
        new (): HTMLRfsFooterElement;
    };
    interface HTMLRfsHeaderElement extends Components.RfsHeader, HTMLStencilElement {
    }
    var HTMLRfsHeaderElement: {
        prototype: HTMLRfsHeaderElement;
        new (): HTMLRfsHeaderElement;
    };
    interface HTMLRfsIntroElement extends Components.RfsIntro, HTMLStencilElement {
    }
    var HTMLRfsIntroElement: {
        prototype: HTMLRfsIntroElement;
        new (): HTMLRfsIntroElement;
    };
    interface HTMLRfsIntroBtnElement extends Components.RfsIntroBtn, HTMLStencilElement {
    }
    var HTMLRfsIntroBtnElement: {
        prototype: HTMLRfsIntroBtnElement;
        new (): HTMLRfsIntroBtnElement;
    };
    interface HTMLRfsIntroDescriptionElement extends Components.RfsIntroDescription, HTMLStencilElement {
    }
    var HTMLRfsIntroDescriptionElement: {
        prototype: HTMLRfsIntroDescriptionElement;
        new (): HTMLRfsIntroDescriptionElement;
    };
    interface HTMLRfsIntroTitleElement extends Components.RfsIntroTitle, HTMLStencilElement {
    }
    var HTMLRfsIntroTitleElement: {
        prototype: HTMLRfsIntroTitleElement;
        new (): HTMLRfsIntroTitleElement;
    };
    interface HTMLRfsNavItemElement extends Components.RfsNavItem, HTMLStencilElement {
    }
    var HTMLRfsNavItemElement: {
        prototype: HTMLRfsNavItemElement;
        new (): HTMLRfsNavItemElement;
    };
    interface HTMLRfsParallaxImageElement extends Components.RfsParallaxImage, HTMLStencilElement {
    }
    var HTMLRfsParallaxImageElement: {
        prototype: HTMLRfsParallaxImageElement;
        new (): HTMLRfsParallaxImageElement;
    };
    interface HTMLRfsParallaxImageVerticalRepeatElement extends Components.RfsParallaxImageVerticalRepeat, HTMLStencilElement {
    }
    var HTMLRfsParallaxImageVerticalRepeatElement: {
        prototype: HTMLRfsParallaxImageVerticalRepeatElement;
        new (): HTMLRfsParallaxImageVerticalRepeatElement;
    };
    interface HTMLRfsSliderAnimatedElement extends Components.RfsSliderAnimated, HTMLStencilElement {
    }
    var HTMLRfsSliderAnimatedElement: {
        prototype: HTMLRfsSliderAnimatedElement;
        new (): HTMLRfsSliderAnimatedElement;
    };
    interface HTMLRfsSliderAnimatedItemElement extends Components.RfsSliderAnimatedItem, HTMLStencilElement {
    }
    var HTMLRfsSliderAnimatedItemElement: {
        prototype: HTMLRfsSliderAnimatedItemElement;
        new (): HTMLRfsSliderAnimatedItemElement;
    };
    interface HTMLRfsTextBoxElement extends Components.RfsTextBox, HTMLStencilElement {
    }
    var HTMLRfsTextBoxElement: {
        prototype: HTMLRfsTextBoxElement;
        new (): HTMLRfsTextBoxElement;
    };
    interface HTMLRfsTextBoxItemElement extends Components.RfsTextBoxItem, HTMLStencilElement {
    }
    var HTMLRfsTextBoxItemElement: {
        prototype: HTMLRfsTextBoxItemElement;
        new (): HTMLRfsTextBoxItemElement;
    };
    interface HTMLElementTagNameMap {
        "rfs-badge-title": HTMLRfsBadgeTitleElement;
        "rfs-carousel-txt": HTMLRfsCarouselTxtElement;
        "rfs-carousel-txt-item": HTMLRfsCarouselTxtItemElement;
        "rfs-float-footer": HTMLRfsFloatFooterElement;
        "rfs-float-header": HTMLRfsFloatHeaderElement;
        "rfs-float-header-item": HTMLRfsFloatHeaderItemElement;
        "rfs-footer": HTMLRfsFooterElement;
        "rfs-header": HTMLRfsHeaderElement;
        "rfs-intro": HTMLRfsIntroElement;
        "rfs-intro-btn": HTMLRfsIntroBtnElement;
        "rfs-intro-description": HTMLRfsIntroDescriptionElement;
        "rfs-intro-title": HTMLRfsIntroTitleElement;
        "rfs-nav-item": HTMLRfsNavItemElement;
        "rfs-parallax-image": HTMLRfsParallaxImageElement;
        "rfs-parallax-image-vertical-repeat": HTMLRfsParallaxImageVerticalRepeatElement;
        "rfs-slider-animated": HTMLRfsSliderAnimatedElement;
        "rfs-slider-animated-item": HTMLRfsSliderAnimatedItemElement;
        "rfs-text-box": HTMLRfsTextBoxElement;
        "rfs-text-box-item": HTMLRfsTextBoxItemElement;
    }
}
declare namespace LocalJSX {
    interface RfsBadgeTitle {
        "bgColor"?: string;
        "color"?: string;
        "styleId"?: string;
    }
    interface RfsCarouselTxt {
    }
    interface RfsCarouselTxtItem {
    }
    interface RfsFloatFooter {
        "bgColor"?: string;
        "color"?: string;
        "radius"?: number;
        "styleId"?: string;
        "textGradientLeft"?: string;
        "textGradientRight"?: string;
    }
    interface RfsFloatHeader {
        "fixed"?: boolean;
    }
    interface RfsFloatHeaderItem {
        "bgColor"?: string;
        "bgColorHover"?: string;
        "color"?: string;
        "styleId"?: string;
        "target"?: string;
    }
    interface RfsFooter {
        "bgColor"?: string;
        "color"?: string;
        "styleId"?: string;
        "textGradientLeft"?: string;
        "textGradientRight"?: string;
    }
    interface RfsHeader {
        "bgColor"?: string;
        "fixed"?: boolean;
        "logo"?: string;
        "rtl"?: boolean;
        "smoothTop"?: boolean;
        "sticky"?: boolean;
        "styleId"?: string;
    }
    interface RfsIntro {
        "anchor"?: string;
        "image"?: void;
        "imgDesk"?: string;
        "imgMobile"?: string;
        "styleId"?: string;
    }
    interface RfsIntroBtn {
        "bgColor"?: string;
        "color"?: string;
        "styleId"?: string;
        "target"?: string;
    }
    interface RfsIntroDescription {
        "color"?: string;
        "styleId"?: string;
    }
    interface RfsIntroTitle {
        "color"?: string;
        "fontSize"?: number;
        "styleId"?: string;
    }
    interface RfsNavItem {
        "action"?: boolean;
        "actionButtonColor"?: string;
        "active"?: boolean;
        "color"?: string;
        "effectColor"?: string;
        "styleId"?: string;
        "target"?: string;
    }
    interface RfsParallaxImage {
        "deskImage"?: string;
        "mobileImage"?: string;
        "styleId"?: string;
    }
    interface RfsParallaxImageVerticalRepeat {
        "deskImage"?: string;
        "mobileImage"?: string;
        "styleId"?: string;
    }
    interface RfsSliderAnimated {
    }
    interface RfsSliderAnimatedItem {
    }
    interface RfsTextBox {
        "bgColor"?: string;
        "styleId"?: string;
    }
    interface RfsTextBoxItem {
        "color"?: string;
        "styleId"?: string;
        "titleColor"?: string;
    }
    interface IntrinsicElements {
        "rfs-badge-title": RfsBadgeTitle;
        "rfs-carousel-txt": RfsCarouselTxt;
        "rfs-carousel-txt-item": RfsCarouselTxtItem;
        "rfs-float-footer": RfsFloatFooter;
        "rfs-float-header": RfsFloatHeader;
        "rfs-float-header-item": RfsFloatHeaderItem;
        "rfs-footer": RfsFooter;
        "rfs-header": RfsHeader;
        "rfs-intro": RfsIntro;
        "rfs-intro-btn": RfsIntroBtn;
        "rfs-intro-description": RfsIntroDescription;
        "rfs-intro-title": RfsIntroTitle;
        "rfs-nav-item": RfsNavItem;
        "rfs-parallax-image": RfsParallaxImage;
        "rfs-parallax-image-vertical-repeat": RfsParallaxImageVerticalRepeat;
        "rfs-slider-animated": RfsSliderAnimated;
        "rfs-slider-animated-item": RfsSliderAnimatedItem;
        "rfs-text-box": RfsTextBox;
        "rfs-text-box-item": RfsTextBoxItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rfs-badge-title": LocalJSX.RfsBadgeTitle & JSXBase.HTMLAttributes<HTMLRfsBadgeTitleElement>;
            "rfs-carousel-txt": LocalJSX.RfsCarouselTxt & JSXBase.HTMLAttributes<HTMLRfsCarouselTxtElement>;
            "rfs-carousel-txt-item": LocalJSX.RfsCarouselTxtItem & JSXBase.HTMLAttributes<HTMLRfsCarouselTxtItemElement>;
            "rfs-float-footer": LocalJSX.RfsFloatFooter & JSXBase.HTMLAttributes<HTMLRfsFloatFooterElement>;
            "rfs-float-header": LocalJSX.RfsFloatHeader & JSXBase.HTMLAttributes<HTMLRfsFloatHeaderElement>;
            "rfs-float-header-item": LocalJSX.RfsFloatHeaderItem & JSXBase.HTMLAttributes<HTMLRfsFloatHeaderItemElement>;
            "rfs-footer": LocalJSX.RfsFooter & JSXBase.HTMLAttributes<HTMLRfsFooterElement>;
            "rfs-header": LocalJSX.RfsHeader & JSXBase.HTMLAttributes<HTMLRfsHeaderElement>;
            "rfs-intro": LocalJSX.RfsIntro & JSXBase.HTMLAttributes<HTMLRfsIntroElement>;
            "rfs-intro-btn": LocalJSX.RfsIntroBtn & JSXBase.HTMLAttributes<HTMLRfsIntroBtnElement>;
            "rfs-intro-description": LocalJSX.RfsIntroDescription & JSXBase.HTMLAttributes<HTMLRfsIntroDescriptionElement>;
            "rfs-intro-title": LocalJSX.RfsIntroTitle & JSXBase.HTMLAttributes<HTMLRfsIntroTitleElement>;
            "rfs-nav-item": LocalJSX.RfsNavItem & JSXBase.HTMLAttributes<HTMLRfsNavItemElement>;
            "rfs-parallax-image": LocalJSX.RfsParallaxImage & JSXBase.HTMLAttributes<HTMLRfsParallaxImageElement>;
            "rfs-parallax-image-vertical-repeat": LocalJSX.RfsParallaxImageVerticalRepeat & JSXBase.HTMLAttributes<HTMLRfsParallaxImageVerticalRepeatElement>;
            "rfs-slider-animated": LocalJSX.RfsSliderAnimated & JSXBase.HTMLAttributes<HTMLRfsSliderAnimatedElement>;
            "rfs-slider-animated-item": LocalJSX.RfsSliderAnimatedItem & JSXBase.HTMLAttributes<HTMLRfsSliderAnimatedItemElement>;
            "rfs-text-box": LocalJSX.RfsTextBox & JSXBase.HTMLAttributes<HTMLRfsTextBoxElement>;
            "rfs-text-box-item": LocalJSX.RfsTextBoxItem & JSXBase.HTMLAttributes<HTMLRfsTextBoxItemElement>;
        }
    }
}
